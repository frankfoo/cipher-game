{"version":3,"sources":["mapping.js","updateBoard.js","validChar.js","App.js","index.js"],"names":["map","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","updateBoard","char","key","cipher","board","flag","mappedKey","i","length","toUpperCase","validChar","forEach","item","console","log","App","React","useState","quote","setQuote","setCipher","setBoard","win","setWin","reset","setReset","useEffect","fetch","then","data","json","newQuote","content","split","re","cipherQuote","test","mapping","newBoard","theme","createMuiTheme","typography","fontFamily","join","body1","fontSize","spacing","classes","makeStyles","hiddenText","color","useStyles","ThemeProvider","Container","Box","pb","pt","Typography","variant","Grid","container","alignItems","display","flexDirection","width","TextField","type","inputProps","style","textAlign","maxLength","id","value","onChange","e","target","targetChar","newChar","disabled","className","disabledBox","Button","pr","onClick","Alert","onClose","Card","Link","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.545314f7.chunk.js","sourcesContent":["let map = {\r\n    A: 'M', B: 'N', C: 'B',\r\n    D: 'V', E: 'C', F: 'X',\r\n    G: 'Z', H: 'L', I: 'K',\r\n    J: 'J', K: 'H', L: 'G',\r\n    M: 'F', N: 'D', O: 'S',\r\n    P: 'A', Q: 'P', R: 'O',\r\n    S: 'I', T: 'U', U: 'Y',\r\n    V: 'T', W: 'R', X: 'E',\r\n    Y: 'W', Z: 'Q'\r\n};\r\n\r\nexport default map;","import React from \"react\";\r\n\r\nconst updateBoard = (char, key, cipher, board, flag) => {\r\n    // Char is the character the user has entered \r\n    // Key is the index\r\n    // Data is the array that contains the cipher quote \r\n    // Board is the array that contains the user answer \r\n    // Setboard is the function that changes Board\r\n    // Flag determines if we're adding a letter or removing it from the board \r\n    \r\n    // Add the letter in\r\n    if (flag === 0) {\r\n        let mappedKey = cipher[key]; // Doesn't matter if we're using the original quote or ciper quote\r\n        for (let i = 0; i < cipher.length; i++) {\r\n            if (cipher[i] === mappedKey) {\r\n                board[i] = char.toUpperCase();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Remove the letter\r\n    if (flag === 1) {\r\n        for (let i = 0; i < board.length; i++) {\r\n            if (board[i] == char) {\r\n                board[i] = '';\r\n            }\r\n        }\r\n    }\r\n    return board;\r\n}\r\n\r\nexport default updateBoard;","import React from 'react';\r\n\r\nconst validChar = (char, board) => {\r\n    let flag = true;\r\n    board.forEach((item) => {\r\n        if (item == char) {\r\n            console.log('false');\r\n            flag = false;\r\n        }\r\n    });\r\n    return flag;\r\n}\r\n\r\nexport default validChar;","import styles from './App.module.css';\r\nimport React from 'react';\r\nimport mapping from './mapping.js';\r\nimport updateBoard from './updateBoard.js';\r\nimport validChar from './validChar.js';\r\n\r\nimport {Container, Button, Typography, Box, Grid, TextField, Link, Card } from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { createMuiTheme, ThemeProvider, makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction App() {\r\n  // Original Quote\r\n  const [quote, setQuote] = React.useState([]);\r\n  // Cipher Quote\r\n  const [cipher, setCipher] = React.useState([]);\r\n  // Gameboard\r\n  const [board, setBoard] = React.useState([]);\r\n  // Winning state\r\n  const [win, setWin] = React.useState(false);\r\n  // Reset\r\n  const [reset, setReset] = React.useState(false);\r\n  React.useEffect(() => {\r\n    fetch(\"https://api.quotable.io/random\")\r\n      .then((data) => data.json())\r\n      .then((data) => {\r\n        let newQuote = data.content;\r\n        newQuote = newQuote.toUpperCase();\r\n        //newQuote = newQuote.replaceAll(/[.;',:]/g, '');\r\n        setQuote(newQuote.split(\"\")); // We've cleaned the original quote, set it to 'quote'\r\n\r\n        let re = /[A-Z]/;\r\n        //let re1 = /[.;',:]/;\r\n        let cipherQuote = '';\r\n\r\n        for (let i = 0; i < newQuote.length; i++) {\r\n          if (re.test(newQuote[i])) {\r\n            cipherQuote += mapping[newQuote[i]]\r\n          } else {\r\n            cipherQuote += newQuote[i]\r\n          }\r\n        }\r\n        setCipher(cipherQuote.split(\"\"));\r\n\r\n        let newBoard = [];\r\n        for (let i = 0; i < cipherQuote.length; i++) {\r\n            newBoard[i] = '';\r\n        }\r\n        setBoard(newBoard);\r\n\r\n      });\r\n  }, [reset]);\r\n\r\n  React.useEffect(() => {\r\n    let flag = true;\r\n    for (let i = 0; i < board.length; i++) {\r\n      if (board[i] != quote[i] && /[A-Z]/.test(quote[i])) {\r\n        flag = false;\r\n      }\r\n    }\r\n    setWin(flag);\r\n  }, [board, quote]);\r\n\r\n  /* Material UI Styling*/\r\n  const theme = createMuiTheme({\r\n    typography: {\r\n      fontFamily: [\r\n        'Montserrat',\r\n        'sans-serif'\r\n      ].join(','),\r\n      body1: {\r\n        fontSize: 20,\r\n      }\r\n    },\r\n    spacing: 8,\r\n  });\r\n\r\n  const useStyles = makeStyles({\r\n    hiddenText: {\r\n      color: 'white',\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container>\r\n        <Box pb={4} pt={4}>\r\n          <Typography variant=\"h3\">Substitution Cipher Game</Typography>\r\n        </Box>\r\n        <Grid container pb={2} pt={2} alignItems='center'>\r\n          {board.map((item, key) => (\r\n            (/[A-Z]/.test(quote[key]) &&\r\n              <Box display=\"flex\" flexDirection=\"column\" width=\"5%\" alignItems='center' pb={1} pt={1}>\r\n                <Typography variant=\"body1\" >{cipher[key]}</Typography>\r\n                <TextField variant=\"outlined\" type=\"text\" inputProps={{style:{textAlign:'center'}}} maxLength=\"1\" id={key} value={item} \r\n                  onChange={(e) => {\r\n                    if (e.target.value == '') {\r\n                      let targetChar = board[key];\r\n                      setBoard([...updateBoard(targetChar, key, cipher, board, 1)])\r\n                    }\r\n                    let newChar = e.target.value.toUpperCase();\r\n                    if (validChar(newChar, board) === true) {\r\n                      setBoard([...updateBoard(e.target.value, key, cipher, board, 0)])\r\n                    }\r\n                  }\r\n                }></TextField>\r\n              </Box>\r\n              || /[.;',:]/.test(quote[key]) &&\r\n              <Box display=\"flex\" flexDirection=\"column\" width=\"5%\" alignItems='center'>\r\n                <Typography variant=\"body1\">{quote[key]}</Typography>\r\n                <TextField variant=\"outlined\" type=\"text\" value={quote[key]} disabled></TextField>\r\n              </Box>\r\n              || \r\n              <Box display=\"flex\" flexDirection=\"column\" width=\"5%\">\r\n                <Typography variant=\"body1\" className={classes.hiddenText}>a</Typography>\r\n                <TextField variant=\"outlined\" type=\"text\" className={classes.disabledBox} disabled></TextField>\r\n              </Box>\r\n            )\r\n          ))}\r\n        </Grid>\r\n        <Box display=\"flex\" pb={4} pt={4} alignItems=\"center\">\r\n          <Button color=\"default\" variant=\"outlined\" pr={5} onClick={() => setReset(!reset)}>New Game</Button>\r\n        </Box>\r\n        <Box pb={4}>\r\n          {win && \r\n            <Alert onClose={() => {}}>Correct Answer</Alert>\r\n          }\r\n        </Box>\r\n        <Card variant=\"outlined\">\r\n          <Typography variant=\"body2\">\r\n            A substitution cipher is where each letter of the alphabet is mapped to a random letter, e.g. every A becomes a P, every B becomes an X.\r\n            <br />\r\n            Your job is to decipher the letters to get the original quote.\r\n            <br />\r\n            There are a few tricks that you can use:\r\n            <br />\r\n            Some letters in English occur more frequently than others e.g. ETAOIN are the top 6 most frequent letters\r\n            <br />\r\n            Do you see a single letter? It could be \"A\" or \"I\"\r\n            <br /> \r\n            Do you see 2 letters that appear together? They could be \"OO\", \"EE\" etc...\r\n            <br /> \r\n            Do you see apostrophes like xxx'x? That last letter could be a T, S etc...\r\n            <br />\r\n            There aren't that many 3 letter words\r\n            <br />\r\n            Good luck!\r\n          </Typography>\r\n        </Card>\r\n        <Box display=\"flex\" flexDirection=\"column\" alignItems='flex-end' pb={2} pt={2}>\r\n         <Typography variant=\"caption\">Created by Frank Foo.</Typography>\r\n         <Typography variant=\"caption\">\r\n          <Link href='https://github.com/frankfoo/cipher-game'>Github Repo.</Link>\r\n        </Typography>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}